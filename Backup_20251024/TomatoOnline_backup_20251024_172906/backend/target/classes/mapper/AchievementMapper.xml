<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.pomodorostudy.mapper.AchievementMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.example.pomodorostudy.entity.Achievement">
        <id column="id" property="id" />
        <result column="user_id" property="userId" />
        <result column="achievement_name" property="achievementName" />
        <result column="achievement_type" property="achievementType" />
        <result column="description" property="description" />
        <result column="icon_url" property="iconUrl" />
        <result column="points" property="points" />
        <result column="unlock_condition" property="unlockCondition" />
        <result column="achieved_time" property="achievedTime" />
        <result column="is_notified" property="isNotified" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, user_id, achievement_name, achievement_type, description, icon_url, points, unlock_condition, achieved_time, is_notified, create_time, update_time
    </sql>

    <!-- 根据用户ID查询成就列表 -->
    <select id="selectByUserId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM achievement
        WHERE user_id = #{userId}
        ORDER BY achieved_time DESC
    </select>

    <!-- 根据成就类型查询 -->
    <select id="selectByAchievementType" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM achievement
        WHERE user_id = #{userId}
        AND achievement_type = #{achievementType}
        ORDER BY achieved_time DESC
    </select>

    <!-- 查询用户最新成就 -->
    <select id="selectLatestAchievements" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM achievement
        WHERE user_id = #{userId}
        ORDER BY achieved_time DESC
        LIMIT #{limit}
    </select>

    <!-- 查询用户未通知的成就 -->
    <select id="selectUnnotifiedAchievements" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM achievement
        WHERE user_id = #{userId}
        AND is_notified = 0
        ORDER BY achieved_time DESC
    </select>

    <!-- 查询高积分成就 -->
    <select id="selectHighPointAchievements" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM achievement
        WHERE user_id = #{userId}
        AND points >= #{minPoints}
        ORDER BY points DESC, achieved_time DESC
    </select>

    <!-- 统计用户成就总数 -->
    <select id="countUserAchievements" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM achievement
        WHERE user_id = #{userId}
    </select>

    <!-- 统计用户成就积分总数 -->
    <select id="sumUserAchievementPoints" resultType="java.lang.Integer">
        SELECT COALESCE(SUM(points), 0)
        FROM achievement
        WHERE user_id = #{userId}
    </select>

    <!-- 按成就类型统计 -->
    <select id="countAchievementsByType" resultType="java.util.Map">
        SELECT 
            achievement_type,
            COUNT(*) as count,
            SUM(points) as total_points
        FROM achievement
        WHERE user_id = #{userId}
        GROUP BY achievement_type
        ORDER BY total_points DESC
    </select>

    <!-- 查询用户成就进度 -->
    <select id="selectAchievementProgress" resultType="java.util.Map">
        SELECT 
            achievement_type,
            COUNT(*) as achieved_count,
            (SELECT COUNT(*) FROM achievement_template WHERE type = a.achievement_type) as total_count
        FROM achievement a
        WHERE user_id = #{userId}
        GROUP BY achievement_type
    </select>

    <!-- 更新成就通知状态 -->
    <update id="updateNotificationStatus">
        UPDATE achievement
        SET is_notified = #{isNotified},
            update_time = NOW()
        WHERE id = #{achievementId}
    </update>

    <!-- 批量更新通知状态 -->
    <update id="batchUpdateNotificationStatus">
        UPDATE achievement
        SET is_notified = 1,
            update_time = NOW()
        WHERE user_id = #{userId}
        AND is_notified = 0
    </update>

    <!-- 查询用户成就排行榜 -->
    <select id="selectAchievementRanking" resultType="java.util.Map">
        SELECT 
            u.username,
            u.avatar,
            COUNT(a.id) as achievement_count,
            COALESCE(SUM(a.points), 0) as total_points
        FROM user u
        LEFT JOIN achievement a ON u.id = a.user_id
        WHERE u.status = 1
        GROUP BY u.id, u.username, u.avatar
        ORDER BY total_points DESC, achievement_count DESC
        LIMIT #{limit}
    </select>

    <!-- 查询成就类型统计 -->
    <select id="selectAchievementTypeStats" resultType="java.util.Map">
        SELECT 
            achievement_type,
            COUNT(*) as total_count,
            COUNT(DISTINCT user_id) as user_count
        FROM achievement
        GROUP BY achievement_type
        ORDER BY total_count DESC
    </select>

    <!-- 查询用户最近获得的成就 -->
    <select id="selectRecentAchievements" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM achievement
        WHERE user_id = #{userId}
        AND achieved_time >= DATE_SUB(NOW(), INTERVAL #{days} DAY)
        ORDER BY achieved_time DESC
    </select>

    <!-- 查询用户成就完成率 -->
    <select id="selectAchievementCompletionRate" resultType="java.util.Map">
        SELECT 
            COUNT(*) as achieved_count,
            (SELECT COUNT(*) FROM achievement_template) as total_count,
            ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM achievement_template), 2) as completion_rate
        FROM achievement
        WHERE user_id = #{userId}
    </select>

    <!-- 查询用户成就时间分布 -->
    <select id="selectAchievementTimeDistribution" resultType="java.util.Map">
        SELECT 
            DATE(achieved_time) as achievement_date,
            COUNT(*) as daily_count
        FROM achievement
        WHERE user_id = #{userId}
        AND achieved_time >= DATE_SUB(NOW(), INTERVAL 30 DAY)
        GROUP BY DATE(achieved_time)
        ORDER BY achievement_date DESC
    </select>

</mapper>
